#include <iostream>
using namespace std;

/*
                Find mountains - 2
        ● Read integers N, M, then Read matrix NxM. Print all positions that are mountain. Position is mountain if its value > 8 neighbours values
        ● Code smartly
        ● Input
            ○ 3 3
            ○ 8 6 1
            ○ 3 2 9
            ○ 1 6 4
        ● Output
            ○ 0 0 (8 > 6, 3, 2)
            ○ 1 2 (9 > 1, 2, 5, 4, 6)
*/

int main() {
    int row, col;
    cin >> row >> col;
    
    // Use static arrays with reasonable maximum size
    int arr[100][100];
    
    // Read the matrix
    for (int i = 0; i < row; ++i) {
        for (int j = 0; j < col; ++j) {
            cin >> arr[i][j];
        }
    }
    
    // Check each position
    for (int i = 0; i < row; ++i) {
        for (int j = 0; j < col; ++j) {
            bool is_mountain = true;
            
            // Check all 8 neighbors
            for (int ni = i-1; ni <= i+1 && is_mountain; ++ni) {
                for (int nj = j-1; nj <= j+1; ++nj) {
                    // Skip the current position
                    if (ni == i && nj == j) continue;
                    
                    // Check if neighbor is valid and larger/equal
                    if (ni >= 0 && ni < row && nj >= 0 && nj < col) {
                        if (arr[ni][nj] >= arr[i][j]) {
                            is_mountain = false;
                            break;
                        }
                    }
                }
            }
            
            // Print position if it's a mountain
            if (is_mountain) {
                cout << i << " " << j << endl;
            }
        }
    }
    
    return 0;
}

/*
    that is another method to check the neighbours using nested loops 
*/
